enum tier {
  free_trial [note: 'Free Trial tier will get their infras data wiped after 30 days']
  bronze
  silver
  gold
  platinum [note: 'Platinum tier will get their own dedicated infra']
}

Table tenant {
  tenant_id UUID
  name varchar(255) [not null]
  domain varchar(255) [not null]
  tier tier [not null]
  infra_id UUID [not null]

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id) [pk]
  }
}

Ref: tenant.infra_id > tenant_infra.tenant_infra_id

Table user {
  user_id UUID

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (user_id) [pk]
  }
}

Table tenant_user {
  tenant_id UUID
  user_id UUID

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, user_id) [pk]
  }
}

Ref: tenant_user.tenant_id > tenant.tenant_id
Ref: tenant_user.user_id > user.user_id

Table tenant_infra {
  tenant_infra_id UUID
  name varchar(255) [not null]
  kafka_brokers "varchar(255)[]" [not null]
  schema_registry_url varchar(255) [not null]
  kafka_connect_url varchar(255) [not null]
  kms_key varchar(255) [not null]

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_infra_id) [pk]
  }
}

Table tag {
  tenant_id UUID
  tag_id UUID
  key varchar(255) [not null]
  value varchar(255) [not null]

  created_by_user_id UUID [not null]
  updated_by_user_id UUID [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, tag_id) [pk]
  }
}

Ref: tag.tenant_id > tenant.tenant_id
Ref: tag.created_by_user_id > user.user_id
Ref: tag.updated_by_user_id > user.user_id

enum topic_producer_type {
  source
  transformer
}

Table topic {
  tenant_id UUID
  topic_id UUID
  name varchar(255) [not null] // Kafka topic name, e.g., "tenant1.source1.collectionA"
  producer_type topic_producer_type [not null]
  producer_id UUID [not null] // References source.source_id or transformer.transfomer_id based on producer_type

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, topic_id) [pk]
  }
}

Ref: topic.tenant_id > tenant.tenant_id

enum source_engine {
  mysql
  postgresql
}

Table source {
  tenant_id UUID
  source_id UUID
  name varchar(255) [not null]
  engine source_engine [not null]
  config JSONB [not null] // Connection details, streaming settings

  created_by_user_id UUID [not null]
  updated_by_user_id UUID [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, source_id) [pk]
  }
}

Ref: source.tenant_id > tenant.tenant_id
Ref: source.created_by_user_id > user.user_id
Ref: source.updated_by_user_id > user.user_id

Table source_output {
  tenant_id UUID
  source_id UUID
  topic_id UUID
  database_name VARCHAR(255) [not null] // database
  group_name VARCHAR(255) [not null] // schema/namespace
  collection_name VARCHAR(255) [not null] // /collection/table
  config JSONB [not null] // Streaming-specific config

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, source_id, topic_id) [pk]
  }
}

Ref: source_output.(tenant_id, source_id) > source.(tenant_id, source_id)
Ref: source_output.(tenant_id, topic_id) > topic.(tenant_id, topic_id)

Table transformer {
  tenant_id UUID
  transfomer_id UUID
  name varchar(255) [not null]
  config JSONB [not null] // Flink job config, transformation logic

  created_by_user_id UUID [not null]
  updated_by_user_id UUID [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, transfomer_id) [pk]
  }
}

Ref: transformer.tenant_id > tenant.tenant_id
Ref: transformer.created_by_user_id > user.user_id
Ref: transformer.updated_by_user_id > user.user_id

Table transformer_input {
  tenant_id UUID
  transformer_id UUID
  topic_id UUID // Input topic consumed by transformer
  config JSONB [not null] // Input-specific config

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, transformer_id, topic_id) [pk]
  }
}

Ref: transformer_input.(tenant_id, transformer_id) > transformer.(tenant_id, transfomer_id)
Ref: transformer_input.(tenant_id, topic_id) > topic.(tenant_id, topic_id)

Table transformer_output {
  tenant_id UUID
  transformer_id UUID
  topic_id UUID // Output topic produced by transformer
  config JSONB [not null] // Output-specific config

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, transformer_id, topic_id) [pk]
  }
}

Ref: transformer_output.(tenant_id, transformer_id) > transformer.(tenant_id, transfomer_id)
Ref: transformer_output.(tenant_id, topic_id) > topic.(tenant_id, topic_id)

enum destination_engine {
  mysql
  postgresql
}

Table destination {
  tenant_id UUID
  destination_id UUID
  name varchar(255) [not null]
  engine destination_engine [not null] // Enum for destination type
  config JSONB [not null] // Connection details, write settings

  created_by_user_id UUID [not null]
  updated_by_user_id UUID [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, destination_id) [pk]
  }
}

Ref: destination.tenant_id > tenant.tenant_id
Ref: destination.created_by_user_id > user.user_id
Ref: destination.updated_by_user_id > user.user_id

Table pipeline {
  tenant_id UUID
  pipeline_id UUID
  name varchar(255) [not null]
  source_id UUID [null]
  destination_id UUID [not null]
  config JSONB [not null] // Pipeline-wide settings

  created_by_user_id UUID [not null]
  updated_by_user_id UUID [not null]
  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, pipeline_id) [pk]
  }
}

Ref: pipeline.tenant_id > tenant.tenant_id
Ref: pipeline.(tenant_id, source_id) > source.(tenant_id, source_id)
Ref: pipeline.(tenant_id, destination_id) > destination.(tenant_id, destination_id)
Ref: pipeline.created_by_user_id > user.user_id
Ref: pipeline.updated_by_user_id > user.user_id

Table pipeline_transformer {
  tenant_id UUID
  pipeline_id UUID
  transformer_id UUID
  stage int [not null] // Order in pipeline (1, 2, 3, ...)
  config JSONB [not null] // Transformer-specific pipeline config

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, pipeline_id, transformer_id) [pk]
    (tenant_id, pipeline_id, stage) [unique] // Ensures unique order per pipeline
  }
}

Ref: pipeline_transformer.(tenant_id, pipeline_id) > pipeline.(tenant_id, pipeline_id)
Ref: pipeline_transformer.(tenant_id, transformer_id) > transformer.(tenant_id, transfomer_id)

Table pipeline_transformer_input {
  tenant_id UUID
  pipeline_id UUID
  transformer_id UUID
  topic_id UUID // Input topic from previous stage

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, pipeline_id, transformer_id, topic_id) [pk]
  }
}

Ref: pipeline_transformer_input.(tenant_id, pipeline_id, transformer_id) > pipeline_transformer.(tenant_id, pipeline_id, transformer_id)
Ref: pipeline_transformer_input.(tenant_id, topic_id) > topic.(tenant_id, topic_id)

Table pipeline_destination_input {
  tenant_id UUID
  pipeline_id UUID
  topic_id UUID // Output topics from last transformer or source to destination as input

  created_at timestamp [not null]
  updated_at timestamp [not null]

  indexes {
    (tenant_id, pipeline_id, topic_id) [pk]
  }
}

Ref: pipeline_destination_input.(tenant_id, pipeline_id) > pipeline.(tenant_id, pipeline_id)
Ref: pipeline_destination_input.(tenant_id, topic_id) > topic.(tenant_id, topic_id)
