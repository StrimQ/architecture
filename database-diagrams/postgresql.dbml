enum tier {
  free_trial [note: 'Free Trial tier will get their infras data wiped after 30 days']
  bronze
  silver
  gold
  platinum [note: 'Platinum tier will get their own dedicated infra']
}

Table tenants {
  tenant_id UUID
  name varchar(255)
  domain varchar(255)
  tier tier
  infra_id UUID

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id) [pk]
  }
}

Ref: tenants.infra_id > tenant_infras.tenant_infra_id

Table users {
  user_id UUID

  created_at timestamp
  updated_at timestamp

  indexes {
    (user_id) [pk]
  }
}

Table tenant_users {
  tenant_id UUID
  user_id UUID

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, user_id) [pk]
  }
}

Ref: tenant_users.tenant_id > tenants.tenant_id
Ref: tenant_users.user_id > users.user_id

Table tenant_infras {
  tenant_infra_id UUID
  name varchar(255)
  kafka_brokers "varchar(255)[]"
  schema_registry_url varchar(255)
  kafka_connect_url varchar(255)
  kms_key varchar(255)

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_infra_id) [pk]
  }
}

Table tags {
  tenant_id UUID
  tag_id UUID
  key varchar(255)
  value varchar(255)

  created_by_user_id UUID
  updated_by_user_id UUID
  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, tag_id) [pk]
  }
}

Ref: tags.tenant_id > tenants.tenant_id
Ref: tags.created_by_user_id > users.user_id
Ref: tags.updated_by_user_id > users.user_id

enum topic_producer_type {
  source
  transformer
}

Table topics {
  tenant_id UUID
  topic_id UUID
  name varchar(255) // Kafka topic name, e.g., "tenant1.source1.collectionA"
  producer_type topic_producer_type
  producer_id UUID // References sources.source_id or transformers.transfomer_id based on producer_type

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, topic_id) [pk]
  }
}

Ref: topics.tenant_id > tenants.tenant_id

enum source_engine {
  mysql
  postgresql
}

Table sources {
  tenant_id UUID
  source_id UUID
  name varchar(255)
  engine source_engine
  config JSONB // Connection details, streaming settings

  created_by_user_id UUID
  updated_by_user_id UUID
  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, source_id) [pk]
  }
}

Ref: sources.tenant_id > tenants.tenant_id
Ref: sources.created_by_user_id > users.user_id
Ref: sources.updated_by_user_id > users.user_id

Table source_outputs {
  tenant_id UUID
  source_id UUID
  topic_id UUID
  database_name VARCHAR(255) // database
  group_name VARCHAR(255) // schema/namespace
  collection_name VARCHAR(255) // /collection/table
  config JSONB // Streaming-specific config

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, source_id, topic_id) [pk]
  }
}

Ref: source_outputs.(tenant_id, source_id) > sources.(tenant_id, source_id)
Ref: source_outputs.(tenant_id, topic_id) > topics.(tenant_id, topic_id)

Table transformers {
  tenant_id UUID
  transfomer_id UUID
  name varchar(255)
  config JSONB // Flink job config, transformation logic

  created_by_user_id UUID
  updated_by_user_id UUID
  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, transfomer_id) [pk]
  }
}

Ref: transformers.tenant_id > tenants.tenant_id
Ref: transformers.created_by_user_id > users.user_id
Ref: transformers.updated_by_user_id > users.user_id

Table transformer_inputs {
  tenant_id UUID
  transformer_id UUID
  topic_id UUID // Input topic consumed by transformer
  config JSONB // Input-specific config

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, transformer_id, topic_id) [pk]
  }
}

Ref: transformer_inputs.(tenant_id, transformer_id) > transformers.(tenant_id, transfomer_id)
Ref: transformer_inputs.(tenant_id, topic_id) > topics.(tenant_id, topic_id)

Table transformer_outputs {
  tenant_id UUID
  transformer_id UUID
  topic_id UUID // Output topic produced by transformer
  config JSONB // Output-specific config

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, transformer_id, topic_id) [pk]
  }
}

Ref: transformer_outputs.(tenant_id, transformer_id) > transformers.(tenant_id, transfomer_id)
Ref: transformer_outputs.(tenant_id, topic_id) > topics.(tenant_id, topic_id)

enum destination_engine {
  mysql
  postgresql
}

Table destinations {
  tenant_id UUID
  destination_id UUID
  name varchar(255)
  engine destination_engine // Enum for destination type
  config JSONB // Connection details, write settings

  created_by_user_id UUID
  updated_by_user_id UUID
  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, destination_id) [pk]
  }
}

Ref: destinations.tenant_id > tenants.tenant_id
Ref: destinations.created_by_user_id > users.user_id
Ref: destinations.updated_by_user_id > users.user_id

Table pipelines {
  tenant_id UUID
  pipeline_id UUID
  name varchar(255)
  source_id UUID [null]
  destination_id UUID
  config JSONB // Pipeline-wide settings

  created_by_user_id UUID
  updated_by_user_id UUID
  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, pipeline_id) [pk]
  }
}

Ref: pipelines.tenant_id > tenants.tenant_id
Ref: pipelines.(tenant_id, source_id) > sources.(tenant_id, source_id)
Ref: pipelines.(tenant_id, destination_id) > destinations.(tenant_id, destination_id)
Ref: pipelines.created_by_user_id > users.user_id
Ref: pipelines.updated_by_user_id > users.user_id

Table pipeline_transformers {
  tenant_id UUID
  pipeline_id UUID
  transformer_id UUID
  stage int // Order in pipeline (1, 2, 3, ...)
  config JSONB // Transformer-specific pipeline config

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, pipeline_id, transformer_id) [pk]
    (tenant_id, pipeline_id, stage) [unique] // Ensures unique order per pipeline
  }
}

Ref: pipeline_transformers.(tenant_id, pipeline_id) > pipelines.(tenant_id, pipeline_id)
Ref: pipeline_transformers.(tenant_id, transformer_id) > transformers.(tenant_id, transfomer_id)

Table pipeline_transformer_inputs {
  tenant_id UUID
  pipeline_id UUID
  transformer_id UUID
  topic_id UUID // Input topic from previous stage

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, pipeline_id, transformer_id, topic_id) [pk]
  }
}

Ref: pipeline_transformer_inputs.(tenant_id, pipeline_id, transformer_id) > pipeline_transformers.(tenant_id, pipeline_id, transformer_id)
Ref: pipeline_transformer_inputs.(tenant_id, topic_id) > topics.(tenant_id, topic_id)

Table pipeline_destination_inputs {
  tenant_id UUID
  pipeline_id UUID
  topic_id UUID // Output topics from last transformer or source to destination as input

  created_at timestamp
  updated_at timestamp

  indexes {
    (tenant_id, pipeline_id, topic_id) [pk]
  }
}

Ref: pipeline_destination_inputs.(tenant_id, pipeline_id) > pipelines.(tenant_id, pipeline_id)
Ref: pipeline_destination_inputs.(tenant_id, topic_id) > topics.(tenant_id, topic_id)
